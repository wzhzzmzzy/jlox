Index: src/com/craftinginterpreters/lox/Parser.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.craftinginterpreters.lox;\n\nimport java.util.List;\n\nimport static com.craftinginterpreters.lox.TokenType.*;\n\nclass Parser {\n    private static class ParseError extends RuntimeException {}\n    private final List<Token> tokens;\n    private int current = 0;\n\n    Parser(List<Token> tokens) {\n        this.tokens = tokens;\n    }\n\n    Expr parse() {\n        try {\n            return expression();\n        } catch (ParseError error) {\n            return null;\n        }\n    }\n\n    private Expr expression() {\n        return equality();\n    }\n\n    private Expr equality() {\n        Expr expr = comparison();\n\n        while (match(BANG_EQUAL, EQUAL_EQUAL)) {\n            Token operator = previous();\n            Expr right = comparison();\n            expr = new Expr.Binary(expr, operator, right);\n        }\n\n        return expr;\n    }\n\n    private Expr comparison() {\n        Expr expr = term();\n\n        while (match(GREATER, GREATER_EQUAL, LESS, LESS_EQUAL)) {\n            Token operator = previous();\n            Expr right = term();\n            expr = new Expr.Binary(expr, operator, right);\n        }\n\n        return expr;\n    }\n\n    private Expr term() {\n        Expr expr = factor();\n\n        while (match(MINUS, PLUS)) {\n            Token operator = previous();\n            Expr right = factor();\n            expr = new Expr.Binary(expr, operator, right);\n        }\n\n        return expr;\n    }\n\n    private Expr factor() {\n        Expr expr = unary();\n\n        while (match(SLASH, STAR)) {\n            Token operator = previous();\n            Expr right = unary();\n            expr = new Expr.Binary(expr, operator, right);\n        }\n\n        return expr;\n    }\n\n    private Expr unary() {\n        if (match(BANG, MINUS)) {\n            Token operator = previous();\n            Expr right = unary();\n            return new Expr.Unary(operator, right);\n        }\n\n        return primary();\n    }\n\n    private Expr primary() {\n        if (match(FALSE)) return new Expr.Literal(false);\n        if (match(TRUE)) return new Expr.Literal(true);\n        if (match(NIL)) return new Expr.Literal(null);\n\n        if (match(NUMBER, STRING)) {\n            return new Expr.Literal(previous().literal);\n        }\n\n        if (match(LEFT_PAREN)) {\n            Expr expr = expression();\n            consume(RIGHT_PAREN, \"Expect ')' after expression.\");\n            return new Expr.Grouping(expr);\n        }\n\n        throw error(peek(), \"Expect expression.\");\n    }\n\n    private boolean match(TokenType... types) {\n        for (TokenType type : types) {\n            if (check(type)) {\n                advance();\n                return true;\n            }\n        }\n\n        return false;\n    }\n\n    private Token consume(TokenType type, String message) {\n        if (check(type)) return advance();\n\n        throw error(peek(), message);\n    }\n\n    private boolean check(TokenType type) {\n        if (isAtEnd()) return false;\n        return peek().type == type;\n    }\n\n    private Token advance() {\n        if (!isAtEnd()) current++;\n        return previous();\n    }\n\n    private boolean isAtEnd() {\n        return peek().type == EOF;\n    }\n\n    private Token peek() {\n        return tokens.get(current);\n    }\n\n    private Token previous() {\n        return tokens.get(current - 1);\n    }\n\n    private ParseError error(Token token, String message) {\n        Lox.error(token, message);\n        return new ParseError();\n    }\n\n    private void synchronize() {\n        advance();\n\n        while (!isAtEnd()) {\n            if (previous().type == SEMICOLON) return;\n\n            switch (peek().type) {\n                case CLASS:\n                case FUN:\n                case VAR:\n                case FOR:\n                case IF:\n                case WHILE:\n                case PRINT:\n                case RETURN:\n                    return;\n            }\n\n            advance();\n        }\n    }\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/com/craftinginterpreters/lox/Parser.java b/src/com/craftinginterpreters/lox/Parser.java
--- a/src/com/craftinginterpreters/lox/Parser.java	(revision 12868378faa8b68400b13353b2bdc21dae1fefc1)
+++ b/src/com/craftinginterpreters/lox/Parser.java	(date 1664520620767)
@@ -1,5 +1,6 @@
 package com.craftinginterpreters.lox;
 
+import java.util.ArrayList;
 import java.util.List;
 
 import static com.craftinginterpreters.lox.TokenType.*;
@@ -13,18 +14,37 @@
         this.tokens = tokens;
     }
 
-    Expr parse() {
-        try {
-            return expression();
-        } catch (ParseError error) {
-            return null;
+    List<Stmt> parse() {
+        List<Stmt> statements = new ArrayList<>();
+        while (!isAtEnd()) {
+            statements.add(statement());
         }
+
+        return statements;
     }
 
     private Expr expression() {
         return equality();
     }
 
+    private Stmt statement() {
+        if (match(PRINT)) return printStatement();
+
+        return expressionStatement();
+    }
+
+    private Stmt expressionStatement() {
+        Expr expr = expression();
+        consume(SEMICOLON, "Expect ';' after expression.");
+        return new Stmt.Expression(expr);
+    }
+
+    private Stmt printStatement() {
+        Expr value = expression();
+        consume(SEMICOLON, "Expect ';' after value.");
+        return new Stmt.Print(value);
+    }
+
     private Expr equality() {
         Expr expr = comparison();
 
Index: .idea/workspace.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project version=\"4\">\n  <component name=\"AutoImportSettings\">\n    <option name=\"autoReloadType\" value=\"SELECTIVE\" />\n  </component>\n  <component name=\"ChangeListManager\">\n    <list default=\"true\" id=\"b0a3fc19-01d4-4df4-bef3-cb109f993d82\" name=\"Changes\" comment=\"fix: finally Lox run\">\n      <change afterPath=\"$PROJECT_DIR$/README.md\" afterDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/.idea/workspace.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/workspace.xml\" afterDir=\"false\" />\n    </list>\n    <option name=\"SHOW_DIALOG\" value=\"false\" />\n    <option name=\"HIGHLIGHT_CONFLICTS\" value=\"true\" />\n    <option name=\"HIGHLIGHT_NON_ACTIVE_CHANGELIST\" value=\"false\" />\n    <option name=\"LAST_RESOLUTION\" value=\"IGNORE\" />\n  </component>\n  <component name=\"FileTemplateManagerImpl\">\n    <option name=\"RECENT_TEMPLATES\">\n      <list>\n        <option value=\"Class\" />\n      </list>\n    </option>\n  </component>\n  <component name=\"Git.Settings\">\n    <option name=\"RECENT_GIT_ROOT_PATH\" value=\"$PROJECT_DIR$\" />\n  </component>\n  <component name=\"MarkdownSettingsMigration\">\n    <option name=\"stateVersion\" value=\"1\" />\n  </component>\n  <component name=\"ProjectId\" id=\"2FQz5nvnhDYhYRIJt4ecxXmaNew\" />\n  <component name=\"ProjectLevelVcsManager\" settingsEditedManually=\"true\" />\n  <component name=\"ProjectViewState\">\n    <option name=\"hideEmptyMiddlePackages\" value=\"true\" />\n    <option name=\"showLibraryContents\" value=\"true\" />\n  </component>\n  <component name=\"PropertiesComponent\"><![CDATA[{\n  \"keyToString\": {\n    \"RunOnceActivity.OpenProjectViewOnStart\": \"true\",\n    \"RunOnceActivity.ShowReadmeOnStart\": \"true\",\n    \"SHARE_PROJECT_CONFIGURATION_FILES\": \"true\"\n  }\n}]]></component>\n  <component name=\"RunManager\" selected=\"Application.Lox\">\n    <configuration name=\"AstPrinter\" type=\"Application\" factoryName=\"Application\" temporary=\"true\" nameIsGenerated=\"true\">\n      <option name=\"MAIN_CLASS_NAME\" value=\"com.craftinginterpreters.lox.AstPrinter\" />\n      <module name=\"jlox\" />\n      <extension name=\"coverage\">\n        <pattern>\n          <option name=\"PATTERN\" value=\"com.craftinginterpreters.lox.*\" />\n          <option name=\"ENABLED\" value=\"true\" />\n        </pattern>\n      </extension>\n      <method v=\"2\">\n        <option name=\"Make\" enabled=\"true\" />\n      </method>\n    </configuration>\n    <configuration name=\"GenerateAst\" type=\"Application\" factoryName=\"Application\" temporary=\"true\" nameIsGenerated=\"true\">\n      <option name=\"MAIN_CLASS_NAME\" value=\"com.craftinginterpreters.tool.GenerateAst\" />\n      <module name=\"jlox\" />\n      <option name=\"PROGRAM_PARAMETERS\" value=\"src/com/craftinginterpreters/lox\" />\n      <extension name=\"coverage\">\n        <pattern>\n          <option name=\"PATTERN\" value=\"com.craftinginterpreters.tool.*\" />\n          <option name=\"ENABLED\" value=\"true\" />\n        </pattern>\n      </extension>\n      <method v=\"2\">\n        <option name=\"Make\" enabled=\"true\" />\n      </method>\n    </configuration>\n    <configuration name=\"Lox\" type=\"Application\" factoryName=\"Application\" temporary=\"true\" nameIsGenerated=\"true\">\n      <option name=\"MAIN_CLASS_NAME\" value=\"com.craftinginterpreters.lox.Lox\" />\n      <module name=\"jlox\" />\n      <extension name=\"coverage\">\n        <pattern>\n          <option name=\"PATTERN\" value=\"com.craftinginterpreters.lox.*\" />\n          <option name=\"ENABLED\" value=\"true\" />\n        </pattern>\n      </extension>\n      <method v=\"2\">\n        <option name=\"Make\" enabled=\"true\" />\n      </method>\n    </configuration>\n    <list>\n      <item itemvalue=\"Application.AstPrinter\" />\n      <item itemvalue=\"Application.GenerateAst\" />\n      <item itemvalue=\"Application.Lox\" />\n    </list>\n    <recent_temporary>\n      <list>\n        <item itemvalue=\"Application.Lox\" />\n        <item itemvalue=\"Application.AstPrinter\" />\n        <item itemvalue=\"Application.GenerateAst\" />\n      </list>\n    </recent_temporary>\n  </component>\n  <component name=\"SpellCheckerSettings\" RuntimeDictionaries=\"0\" Folders=\"0\" CustomDictionaries=\"0\" DefaultDictionary=\"application-level\" UseSingleDictionary=\"true\" transferred=\"true\" />\n  <component name=\"TaskManager\">\n    <task active=\"true\" id=\"Default\" summary=\"Default task\">\n      <changelist id=\"b0a3fc19-01d4-4df4-bef3-cb109f993d82\" name=\"Changes\" comment=\"\" />\n      <created>1664438917844</created>\n      <option name=\"number\" value=\"Default\" />\n      <option name=\"presentableId\" value=\"Default\" />\n      <updated>1664438917844</updated>\n    </task>\n    <task id=\"LOCAL-00001\" summary=\"fix: finally Lox run\">\n      <created>1664454486401</created>\n      <option name=\"number\" value=\"00001\" />\n      <option name=\"presentableId\" value=\"LOCAL-00001\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1664454486401</updated>\n    </task>\n    <option name=\"localTasksCounter\" value=\"2\" />\n    <servers />\n  </component>\n  <component name=\"Vcs.Log.Tabs.Properties\">\n    <option name=\"TAB_STATES\">\n      <map>\n        <entry key=\"MAIN\">\n          <value>\n            <State />\n          </value>\n        </entry>\n      </map>\n    </option>\n  </component>\n  <component name=\"VcsManagerConfiguration\">\n    <MESSAGE value=\"fix: finally Lox run\" />\n    <option name=\"LAST_COMMIT_MESSAGE\" value=\"fix: finally Lox run\" />\n  </component>\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/workspace.xml b/.idea/workspace.xml
--- a/.idea/workspace.xml	(revision 12868378faa8b68400b13353b2bdc21dae1fefc1)
+++ b/.idea/workspace.xml	(date 1664520937589)
@@ -4,9 +4,12 @@
     <option name="autoReloadType" value="SELECTIVE" />
   </component>
   <component name="ChangeListManager">
-    <list default="true" id="b0a3fc19-01d4-4df4-bef3-cb109f993d82" name="Changes" comment="fix: finally Lox run">
-      <change afterPath="$PROJECT_DIR$/README.md" afterDir="false" />
+    <list default="true" id="b0a3fc19-01d4-4df4-bef3-cb109f993d82" name="Changes" comment="docs: add note">
+      <change afterPath="$PROJECT_DIR$/src/com/craftinginterpreters/lox/Interpreter.java" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/src/com/craftinginterpreters/lox/Stmt.java" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/.idea/workspace.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/workspace.xml" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/com/craftinginterpreters/lox/Parser.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/com/craftinginterpreters/lox/Parser.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/com/craftinginterpreters/tool/GenerateAst.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/com/craftinginterpreters/tool/GenerateAst.java" afterDir="false" />
     </list>
     <option name="SHOW_DIALOG" value="false" />
     <option name="HIGHLIGHT_CONFLICTS" value="true" />
@@ -36,10 +39,11 @@
   "keyToString": {
     "RunOnceActivity.OpenProjectViewOnStart": "true",
     "RunOnceActivity.ShowReadmeOnStart": "true",
-    "SHARE_PROJECT_CONFIGURATION_FILES": "true"
+    "SHARE_PROJECT_CONFIGURATION_FILES": "true",
+    "settings.editor.selected.configurable": "editor.preferences.fonts.default"
   }
 }]]></component>
-  <component name="RunManager" selected="Application.Lox">
+  <component name="RunManager" selected="Application.GenerateAst">
     <configuration name="AstPrinter" type="Application" factoryName="Application" temporary="true" nameIsGenerated="true">
       <option name="MAIN_CLASS_NAME" value="com.craftinginterpreters.lox.AstPrinter" />
       <module name="jlox" />
@@ -87,9 +91,9 @@
     </list>
     <recent_temporary>
       <list>
+        <item itemvalue="Application.GenerateAst" />
         <item itemvalue="Application.Lox" />
         <item itemvalue="Application.AstPrinter" />
-        <item itemvalue="Application.GenerateAst" />
       </list>
     </recent_temporary>
   </component>
@@ -109,7 +113,14 @@
       <option name="project" value="LOCAL" />
       <updated>1664454486401</updated>
     </task>
-    <option name="localTasksCounter" value="2" />
+    <task id="LOCAL-00002" summary="docs: add note">
+      <created>1664454781552</created>
+      <option name="number" value="00002" />
+      <option name="presentableId" value="LOCAL-00002" />
+      <option name="project" value="LOCAL" />
+      <updated>1664454781552</updated>
+    </task>
+    <option name="localTasksCounter" value="3" />
     <servers />
   </component>
   <component name="Vcs.Log.Tabs.Properties">
@@ -125,6 +136,11 @@
   </component>
   <component name="VcsManagerConfiguration">
     <MESSAGE value="fix: finally Lox run" />
-    <option name="LAST_COMMIT_MESSAGE" value="fix: finally Lox run" />
+    <MESSAGE value="docs: add note" />
+    <option name="LAST_COMMIT_MESSAGE" value="docs: add note" />
+  </component>
+  <component name="XSLT-Support.FileAssociations.UIState">
+    <expand />
+    <select />
   </component>
 </project>
\ No newline at end of file
Index: src/com/craftinginterpreters/tool/GenerateAst.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.craftinginterpreters.tool;\n\nimport java.io.IOException;\nimport java.io.PrintWriter;\nimport java.util.Arrays;\nimport java.util.List;\n\npublic class GenerateAst {\n    public static void main(String[] args) throws IOException {\n        if (args.length != 1) {\n            System.err.println(\"Usage: generate_ast <output directory>\");\n            System.exit(64);\n        }\n        String outputDir = args[0];\n        defineAst(outputDir, \"Expr\", Arrays.asList(\n                \"Binary   : Expr left, Token operator, Expr right\",\n                \"Grouping : Expr expression\",\n                \"Literal  : Object value\",\n                \"Unary    : Token operator, Expr right\"\n        ));\n    }\n\n    private static void defineAst(String outputDir, String baseName, List<String> types) throws IOException {\n        String path = outputDir + \"/\" + baseName + \".java\";\n        PrintWriter writer = new PrintWriter(path, \"UTF-8\");\n\n        writer.println(\"package com.craftinginterpreters.lox;\");\n        writer.println();\n        writer.println(\"import java.util.List;\");\n        writer.println();\n        writer.println(\"abstract class \" + baseName + \" {\");\n\n        defineVisitor(writer, baseName, types);\n\n        // The AST classes.\n        for (String type : types) {\n            String className = type.split(\":\")[0].trim();\n            String fields = type.split(\":\")[1].trim();\n            defineType(writer, baseName, className, fields);\n        }\n\n        // The base accept() method.\n        writer.println();\n        writer.println(\"  abstract <R> R accept(Visitor<R> visitor);\");\n\n        writer.println(\"}\");\n        writer.close();\n    }\n\n    private static void defineVisitor(PrintWriter writer, String baseName, List<String> types) {\n        writer.println(\"  interface Visitor<R> {\");\n\n        for (String type : types) {\n            String typeName = type.split(\":\")[0].trim();\n            writer.println(\n                \"    R visit\" + typeName + baseName + \"(\" + typeName + \" \" + baseName.toLowerCase() + \");\"\n            );\n        }\n\n        writer.println(\"  }\");\n    }\n\n    private static void defineType(PrintWriter writer, String baseName, String className, String fieldList) {\n        writer.println(\"  static class \" + className + \" extends \" + baseName + \" {\");\n\n        // Constructor.\n        writer.println(\"    \" + className + \"(\" + fieldList + \") {\");\n\n        // Store parameters in fields.\n        String[] fields = fieldList.split(\", \");\n        for (String field : fields) {\n            String name = field.split(\" \")[1];\n            writer.println(\"      this.\" + name + \" = \" + name + \";\");\n        }\n\n        writer.println(\"    }\");\n\n        // Visitor pattern.\n        writer.println();\n        writer.println(\"    @Override\");\n        writer.println(\"    <R> R accept(Visitor<R> visitor) {\");\n        writer.println(\"      return visitor.visit\" + className + baseName + \"(this);\");\n        writer.println(\"    }\");\n\n        // Fields.\n        writer.println();\n        for (String field : fields) {\n            writer.println(\"    final \" + field + \";\");\n        }\n\n        writer.println(\"  }\");\n    }\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/com/craftinginterpreters/tool/GenerateAst.java b/src/com/craftinginterpreters/tool/GenerateAst.java
--- a/src/com/craftinginterpreters/tool/GenerateAst.java	(revision 12868378faa8b68400b13353b2bdc21dae1fefc1)
+++ b/src/com/craftinginterpreters/tool/GenerateAst.java	(date 1664520235302)
@@ -18,6 +18,11 @@
                 "Literal  : Object value",
                 "Unary    : Token operator, Expr right"
         ));
+
+        defineAst(outputDir, "Stmt", Arrays.asList(
+                "Expression : Expr expression",
+                "Print      : Expr expression"
+        ));
     }
 
     private static void defineAst(String outputDir, String baseName, List<String> types) throws IOException {
Index: src/com/craftinginterpreters/lox/Interpreter.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/com/craftinginterpreters/lox/Interpreter.java b/src/com/craftinginterpreters/lox/Interpreter.java
new file mode 100644
--- /dev/null	(date 1664521052326)
+++ b/src/com/craftinginterpreters/lox/Interpreter.java	(date 1664521052326)
@@ -0,0 +1,53 @@
+package com.craftinginterpreters.lox;
+
+import java.util.List;
+
+class Interpreter implements Expr.Visitor<Object>, Stmt.Visitor<Void> {
+
+    @Override
+    public Object visitBinaryExpr(Expr.Binary expr) {
+        return null;
+    }
+
+    @Override
+    public Object visitGroupingExpr(Expr.Grouping expr) {
+        return null;
+    }
+
+    @Override
+    public Object visitLiteralExpr(Expr.Literal expr) {
+        return null;
+    }
+
+    @Override
+    public Object visitUnaryExpr(Expr.Unary expr) {
+        return null;
+    }
+
+    @Override
+    public Void visitExpressionStmt(Stmt.Expression stmt) {
+        evaluate(stmt.expression);
+        return null;
+    }
+
+    @Override
+    public Void visitPrintStmt(Stmt.Print stmt) {
+        Object value = evaluate(stmt.expression);
+        System.out.println(stringify(value));
+        return null;
+    }
+
+    void interpret(List<Stmt> statements) {
+        try {
+            for (Stmt statement : statements) {
+                execute(statement);
+            }
+        } catch (RuntimeError error) {
+            Lox.runtimeError(error);
+        }
+    }
+
+    private void execute(Stmt stmt) {
+        stmt.accept(this);
+    }
+}
\ No newline at end of file
Index: src/com/craftinginterpreters/lox/Stmt.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/com/craftinginterpreters/lox/Stmt.java b/src/com/craftinginterpreters/lox/Stmt.java
new file mode 100644
--- /dev/null	(date 1664520568437)
+++ b/src/com/craftinginterpreters/lox/Stmt.java	(date 1664520568437)
@@ -0,0 +1,36 @@
+package com.craftinginterpreters.lox;
+
+import java.util.List;
+
+abstract class Stmt {
+  interface Visitor<R> {
+    R visitExpressionStmt(Expression stmt);
+    R visitPrintStmt(Print stmt);
+  }
+  static class Expression extends Stmt {
+    Expression(Expr expression) {
+      this.expression = expression;
+    }
+
+    @Override
+    <R> R accept(Visitor<R> visitor) {
+      return visitor.visitExpressionStmt(this);
+    }
+
+    final Expr expression;
+  }
+  static class Print extends Stmt {
+    Print(Expr expression) {
+      this.expression = expression;
+    }
+
+    @Override
+    <R> R accept(Visitor<R> visitor) {
+      return visitor.visitPrintStmt(this);
+    }
+
+    final Expr expression;
+  }
+
+  abstract <R> R accept(Visitor<R> visitor);
+}
